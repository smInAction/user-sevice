# This is a basic workflow to help you get started with Actions
name: Azure deployment build
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  REGISTRY_NAME: smdockercontainerreg
  CLUSTER_NAME: smK8sCluster2
  CLUSTER_RESOURCE_GROUP: data_resources
  NAMESPACE: default
  APP_NAME: user-service
  SECRET: b0cb2415-0bdc-4eb5-a37d-f7a3e0b70dc9

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Set up Java version
      - name: Setup Java version
        uses: actions/setup-java@v1
        with:
          java-version: 11

      # Run maven build
      - name: Run a maven build command
        run: mvn clean install

        # Verify the build
      - name: list of files in root directory
        run: ls -a

        # Verify build in target directory
      - name: list of files in target directory
        run: ls -a target/

      # Connect to Azure Container Registry (ACR)
      - uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      # Container build and push to a Azure Container Registry (ACR)
      - run: |
          docker build . -t ${{ env.REGISTRY_NAME }}.azurecr.io/images/${{ env.APP_NAME }}:latest
          docker push ${{ env.REGISTRY_NAME }}.azurecr.io/images/${{ env.APP_NAME }}:latest

      # Set the target Azure Kubernetes Service (AKS) cluster.
      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ env.CLUSTER_RESOURCE_GROUP }} \
            --name ${{ env.CLUSTER_NAME }} \
            --overwrite-existing
      # Create namespace if doesn't exist
      - run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -

      # Create image pull secret for ACR
      - uses: azure/k8s-create-secret@v1
        with:
          container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
          container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
          container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          secret-name: ${{ env.SECRET }}
          namespace: ${{ env.NAMESPACE }}
          force: true

      # Deploy app to AKS
      - uses: azure/k8s-deploy@v1
        with:
          manifests: |
            k8s_config/user-service-deployment.yml
          images: |
            ${{ env.REGISTRY_NAME }}.azurecr.io/images/${{ env.APP_NAME }}:latest
          imagepullsecrets: |
            ${{ env.SECRET }}
          namespace: ${{ env.NAMESPACE }}
